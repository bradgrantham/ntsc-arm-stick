Rein it in... or not
    How to wrap up with a bow fast?
        board with 415 or 745 and microSD, two DB9s, PS/2 keyboard, NTSC composite out, mono Line-out, USB in for power and programming and stick an FTDI for UART?
        Be able to demo
            Wolfenstein
            ColecoVision
            show
            3D Spin
            play sound (in background?)
        Leave *potential* to hook Channel F 9-pin to DB9s
        Blog post
        Build docs
        API docs
    try out HSI oscillator - can NTSC color be stable?
    system button kicks back to text 0?
    clean up rect mode
    setup a software interrupt for VBlank processing (e.g. update scanout stats, audio goop) and trigger it from row=262 and row = 525 -> event interrupt?
    make a scrollback buffer (how to scroll back?)
        2 pages of 80x24 = 3840 bytes, need to keep in RAM somewhere
    frame stats should be a histogram
    Regularize I/O, get keyboard and serial combined into one queue
        serial and textport cooked should flush on '\n'
        serial and keyboard should interrupt and fill one buffer
        int InputGetChar(c);    // -1 if no key waiting, maybe support raw modes for PS/2
        int InputWaitChar(c);
        OutputPutChar(int c);
    help and other output should be paged -
        have a special mode in non-VT102 mode?  Start Paging / Stop Paging?
        OutputSetPaging(int paging)
    Move NTSC goop to another .c
    Move Audio goop to another .c
    Add some things to shell
        startup.sh # run from disk, quit scripting on blue button
        # run from a file
            will recursion work the way you've set it up?
        # parse between "" as one word
        # break commands on ";" outside ""
        # ignore everything after '#' outside ""
        sleep floatseconds # easy
        # variables - "$var"?
        getchar [var] # get a single character
        read [var] # get everything up to ENTER
        echo everything afterwards is echoed # easy
        # pixmap only :
            palette N r g b
            circle N x y r
            line N x0 y0 x1 y1
            clear N
        # expressions
        for var = A to B [step C] ; endfor
        for var in A B C D E F G ; endfor
    VideoModeGetInfo should take a type so it can avoid copying wrong struct
    everything should return 0 on success or non-zero error or void if it can't fail
    audio
        22050Hz?  11025Hz?  8000Hz?
        write audio sample immediately on entry to line ISR?  Then calculate next one right after that, then do video calculation?
            Then audio resampling would happen at the line rate for whatever video mode is current...
        Do DMA at 22050 from double-buffered 512-byte buffers?  Could conflict with video but should be able to set priority lower.
        stereo audio output?
        audio modes:
            MIXED: add a finite-length U8 with arbitrary sample rate to the stream, audio processing will add up all active ones
            DIRECT: app callback to fill a buffer at a rate given to the callback
        does there need to be a mix in the DIRECT mode for things like beep, etc?
    vile sucks, figure it out or replace it; issues:
        #dd doesn't work
        O and o behave weirdly
        0 does not go to the beginning of the line
        a and then enter does not scroll down
        #G uses line numbers off by one - is this termios?
    VT102 handling (in combination with vile) doesn't handle inserting a line?
    image viewer should add together lines and pixels so data is not abandoned
    would be nice if video modes could have multiple submodes
        pixmap *and* text for last 4 rows
        wolfenstein *and* pixmap for bottom stats *and* upper-left small pixmap or text for FPS
    Chaiscript?
    special segment mode - 320 pixels wide (so 640 clocks, 2 clocks wide)
        app
            transforms lit, gouraud triangles to screen
            intersect scanlines with triangles
                output list of scanline edges
                do intersection and clipping of edges in depth
                sort in X including background
        video mode
            walks segments in turn assuming they touch all pixels
            interpolating, what?  RGB probably too slow - HSV?
            test program = circle
        Look up texture?  May be too hard to do perspective correction?
    Should debug overlay XOR or just have black background?
        find pixel under and set white or black based on that?
    Should NTSC modes take an RGB and use some kind of optimized lookup of 4 pixels at a time?
        If DVDs really have 700 vertical lines resolution, what do they do when going to Composite?
    Get DB9 joystick working
        uint32_t InputGetJoystickDir(int whichJoy) // flags or'd ; JOYSTICK_LEFT, etc
        uint32_t InputGetJoystickButton(int whichJoy) // flags or'd ; JOYSTICK_BUTTON0, JOYSTICK_BUTTON1, etc
        get Coleco joystick working
    Raycaster game!
        monsters come after you, can be shot, inflict damage within certain range
        need sprites for powerups, monsters other goop
        gun
        bottom row shows health, points
        health powerups?
        put texture on ceiling and floor
    video needs a "switching" mode
        old mode -> blank (fillrow does black) -> new mode
    PS/2 mouse?
    "Apps"
        Apps should have some kind of heap for their use freed up before each app
            limit use by main as much as possible - mark heap with some kind of symbol?
        Should have a POSIX harness for running and testing the apps
            at least one of all modes for testing (how to do weird modes?)
        System APIs that Apps can call
            OS/stdlib calls
                putchar?  getchar?
                malloc, free, etc
                fopen, fclose, etc
            video mode and config (NTSC vs VGA handled by hard board switch)
            serial port control
            register vblank handler
            get time and sleep
            audio mode and config
            get keyboard input
            read DB9 joystick
            use Chan's FatFS directly, routines implemented in main
            layered facilities
                textport
                VT102 terminal processing (on textport)
                    essentially just init() and putchar()
                graphics routines
        Wolfenstein
        Image Viewer (ppm?)
        3D viewer
        BASIC
        movie player
        CP/M emulation
        Colecovision
        Apple2e
        WeFAX decoder
    Additional video modes
        TMS 9918A mode - expose the chip I/O
            TMS pixels area is 192 lines high
        Apple //e mode - give pointers to memory and soft switches
        DCT mode
        scanline edge rendered mode - make RGB-to-byte as fast as possible
    Channel F emulator, 9pin header adapters (bake into controller for Bart)
        need 16 pins for two controllers!
    Colecovision emulator
    Some kind of 3D uberdemo, realtime scan out, buffer of sorted scanline segments?
    BASIC
        just implement 80x24 text mode for now
        video N # set video mode N
        lut c, r, g, b # calculate lut entry c for int r, g, b
        plot x, y, c    # plot pixel x, y with lut c
        line x0, y0, x1, y1, c # plot line
        clear c # clear screen to LUT color
        text N # text mode
        split {0,1} # split screen graphics and text (dependent on the modes?)
        handle a bunch of old BASIC programs like STARTREK, WUMPUS, ...?
        implement lunar lander
        Life: https://www.atariarchives.org/basicgames/showpage.php?page=100
            https://github.com/rricharz/R65/blob/master/Basic/life.bas
        Lunar Lander: https://www.atariarchives.org/basicgames/showpage.php?page=106
            http://vintage-basic.net/bcg/lunar.bas
        Sine Wave: https://www.atariarchives.org/basicgames/showpage.php?page=146
            http://www.vintage-basic.net/bcg/sinewave.bas
        Super Star Trek: https://www.atariarchives.org/basicgames/showpage.php?page=157
        3D Plot: https://www.atariarchives.org/basicgames/showpage.php?page=167
            http://vintage-basic.net/bcg/3dplot.bas


4/13
    On a hunch that maybe AHB doesn't do uchar writes directly and
      instead fetched a long, masked, or'd, and wrote a long, I tried
      doing word writes to GPIOC->ODR from DMA.  This would
      have been very inconvenient (altering ALL of GPIOC at once) but
      also would have meant using much more memory (a uint32_t per
      sample even though only 8 bits are used).  It didn't help, and
      in fact seemed worse.  Color didn't lock, jitter seemed as
      bad as uchar, and fillRowBuffer took MUCH longer (like 50% of the ISR).
    Tried half transfer and circular DMA buffer instead of DBM.  No
      change.  I think this is expected - DBM and Circular are probably
      implemented with the same logic except Circular updates always
      from M0AR.
4/12
    Observations
        While playing the khan segment, I got 7 FIFO underruns.  But that was over the course of many seconds.
        Do I just have an electrical issue?  Like when enough of the chip fires at once, I get a brownout?
	    That would explain the noise while the CPU is operating.
	    The noise is just brightness variations and not loss of pixels or sync.

4/11
    VTOR - vector table TBLOFF
    putting VTOR in SRAM1 didn't do anything
    while(1) WFI nor WFE did anything

4/10
    observations
        Here's a mystery: the porch value is 0x50, and that's at one voltage.  If I fill the color image with 0x50, that shows a slightly different voltage.

4/9
    observations
        glitch happens on line proportional to work done for the line (for the next line?)
        on YIQ images, glitch happens at the same horizontal location (because YIQ work is constant length per line)
        on lines with no work at low clocks rates, perfect color lock.
        better at lower clocks, worse at higher clocks, so is there a glitch happening in the colorburst at higher clocks?  Earlier per frame?
        Almost EVERYTHING is in CCM RAM now, except for font.  Could maybe copy into CCM but getting tight on stack.
        Drawing lk.ppm, suddenly switches from red to green or green to blue, or about 90 degrees, implying one missed transfer.
            So the DMA couldn't get memory for N cycles?  Or the GPIO stalled long enough to miss?

Video modes
    80x24 text at 8x16 is 640x384
    80x24 text at 8x8 is 640x192
    underscan rects
        one rect is 196, 830, 44, 236 (shorter but wider) - PROBABLY CHOOSE THIS ONE
            to be /4, use 196, 828, 44, 236
            636 by 192, 122112 pixels in frame, 15264 bytes at 1-bit monochrome
                Apple 2 560x192 DHGR would fit in here
            318 double pixels wide, 61056 pixels in frame
            159 quad pixels wide, 30528 pixels in frame
        one rect is 209, 819, 40, 244 (slightly narrower but taller)
            to be /4, use 208, 820, 40, 244
            612 by 204, 124848 pixels in frame, 15606 bytes at 1-bit monochrome
                could get by with 512 x 200 in this mode
                Apple 2 560x192 DHGR would fit in here
            306 double pixels wide, 62424 pixels in frame
            153 quad pixels wide, 31212 pixels in frame 
        to get to 640 for 80x8 font, could do 196, 832, 44, 236
            height of font has to also be 8 at 192 pixels tall (matches Apple 2)
    overscan rect is 167, 862, 27, 257
        to be /4, 164, 864, 27, 257
        700 x 230, 20125 bytes at 1-bit monochome
        350 double pixels wide, 80500 pixels in frame, would need to be 4-bit
        175 quad pixels wide, 40250 pixels in frame, could support 8 bit

for reference, H is 63555.56us
Scope only locks to my video at line #5

221 capacitor is 220 pF / .22 nF
    3x = .66 nF
332 capacitor is 3300 pF / 3.3 nF
    So 1 nF or 2 nF might be nice intermediate
    2x would be 1.5 nF

Need database of video field formats
    VCR, Apple //e, Video tape, Look at Channel F output from VCR
    Want %H of each segment and voltage
        Number of first EQ burst (e.g. 0 or 6)
        Number of VSYNC bursts a la VCR and NTSC standard (e.g. 0 or 6)
        Number of VSYNC lines a la Apple //e (e.g. 4 or 0)
        Whether VSYNC lines have colorburst
        Number of second EQ burst (e.g. 0 or 6)
        Regular lines: sync pulse, back porch, location and count of colorbursts, front porch
        number of blank lines before, number of blank lines after
    "video {fcc1953, vcr, apple2e, tape, channelf}"

To Do
    Clean up breadboard - prevent wires from being yanked 
        make video connector a little less precarious somehow
        scope testpoints
    Design PCB, send off
        option to drive NTSC DAC or VGA 
    embed a basic or scripting language
        read and write files
        MicroPython?
    factor out video formats somehow
        give a shot at decompressing JPEG blocks in RT
        interlaced mode
        Apple //e video mode per row
            allow loading 0x2000 blobs
            HGR, GR? TEXT? 80TEXT? DHGR? DGR?
        Channel F video mode
    Apple //e emulation
    Z80 / CP/M emulation
    Channel F emulation
    ColecoVision emulation

So I now remember sort of that the Mikro has its own bootloader (?)
which can only be used with the Mikro downloader EXE.  Does the
Mikro not expose BOOT0?  I had made my own board out of an unmodified
STM32 exposing BOOT0 on the crazy big protoboard.  I can downloading using
"make burn", which calls dfu-util.

optimize Wolf Row more
    Measured taking between 86% and 92% of frame at 400 pixels
        at 200MHz I have HCLKs clocks per row.  Assume 10% on clearing pixels, 11488 HCLKs, so between 25 and 27 clocks per pixel; you're not going to get any faster.
    You should MIPmaps for quality but you're probably not thrashing cache, and that's going to slow you down.
    Maybe go to 2X pixels and 350 samples - can maybe MIPmap.

interlaced?  Does there need to be a non-interlaced vs interlaced mode?
    let VideoMode handle it in width, height, and aspect
    Then rowNumber to FillRow functions sequential line number?  so lineNumber = 262 is half the end of odd field, half the beginning of even field?
        240P modes would render lineNumber for odd field, lineNumber - 263 for even field
        480i modes would calculate lineNumber * 2 as rowNumber for even field, or (lineNumber 263) * 2 + 1 as rowNumber for odd field
        line 263 through 264 are handled specially by rowFill (copying in half of the next line)x
    implementation (starting from line 0)
        line 262 - overwrite last 405 samples with first 405 samples of EQ pulse
        lines 263, 264 - last 405 of eq pulse then first 405 of eq pulse
        lines 265 - last 405 of eq pulse then first 405 of vsync
        lines 266, 267 - last 405 of vsync then first 405 of vsync
        lines 268 - last 405 of vsync then first 405 of eq pulse
        lines 269, 270 - last 405 of eq pulse then first 405 of eq pulse
        line 271 - last 405 of eq pulse then 405 of SyncPorch
        special line 282 - write SyncPorch fron BackPorch to middle of line after mode's fillRow()
        fix all fillRows to handle row > 250

/Users/grantham/packages/gcc-arm-none-eabi-7-2018-q2-update/bin/arm-none-eabi-objdump -x main.elf

Why is there purple where there should be brown? -> palette setting failure?  Clamping in YIQ calculations?
    looks like a DAC issue - switch from 0x7F to 0x80 is a big voltage drop
    Assume this would get fixed with .1% tolerance resistors (or even 1% tolerance)
