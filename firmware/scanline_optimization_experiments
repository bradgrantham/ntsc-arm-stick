typedef unsigned int uint32_t;

float sinf(float);
float cosf(float);

#define DAC_VALUE_LIMIT 0xFF

#define MAX_DAC_VOLTAGE 1.22f

#define NTSC_SYNC_BLACK_VOLTAGE   .339f
#define NTSC_SYNC_WHITE_VOLTAGE   1.0f  /* VCR had .912v */

inline __attribute__((alwaysinline)) unsigned char voltageToDACValue(float voltage)
{
   // if(voltage < 0.0f) {
   //     return 0x0;
   // }
    uint32_t value = (uint32_t)(voltage * (255 / MAX_DAC_VOLTAGE));
    // if(value >= DAC_VALUE_LIMIT) {
       //  return DAC_VALUE_LIMIT;
    // }
    return value;
}

#define M_PI 3.141592

inline __attribute__((alwaysinline)) unsigned char NTSCYIQToDAC(float y, float i, float q, float tcycles)
{
// This is transcribed from the NTSC spec, double-checked.
    float wt = tcycles * M_PI * 2;
    float sine = sinf(wt + 33.0f / 180.0f * M_PI);
    float cosine = cosf(wt + 33.0f / 180.0f * M_PI);
    float signal = y + q * sine + i * cosine;
// end of transcription

    return voltageToDACValue(NTSC_SYNC_BLACK_VOLTAGE + signal * (NTSC_SYNC_WHITE_VOLTAGE - NTSC_SYNC_BLACK_VOLTAGE));
}

inline __attribute__((alwaysinline)) uint32_t YIQToWave(float y, float i, float q, int which)
{
    switch(which) {
        case 0: 
            return NTSCYIQToDAC(y, i, q, 0.0f) << 0;
            break;
        case 1: 
            return NTSCYIQToDAC(y, i, q, 0.25f) << 8;
            break;
        case 2: 
            return NTSCYIQToDAC(y, i, q, 0.5f) << 16;
            break;
        case 3: 
            return NTSCYIQToDAC(y, i, q, 0.75f) << 24;
            break;
    }
}

void Rasterize(int x0, int w, float y0, float i0, float q0, float dy, float di, float dq, unsigned char *row)
{
    // assume x and w are evenly divisible by 4, pick up start and end later
    for(int x = x0; x < x0 + w; x+= 4) {
        *(uint32_t*)(row + x) = YIQToWave(y0, i0, q0, 0) | YIQToWave(y0 + dy, i0 + di, q0 + dq, 1) | YIQToWave(y0 + 2.0f * dy, i0 + 2.0f * di, q0 + 2.0f * dq, 2) | YIQToWave(y0 + 3.0f * dy, i0 + 3.0f * di, q0 + 3.0f * dq, 3);
        y0 += 4 * dy;
        i0 += 4 * di;
        q0 += 4 * dq;
    }
}
